version: '3.6'

networks:
  monitor-net:
    driver: bridge
  postgres:
    driver: bridge


volumes:
    prometheus_data: {}
    grafana_data: {}

services:

  prometheus:
    image: prom/prometheus:v2.2.0-rc.0
    container_name: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    ports:
      - "9090:9090"
    networks:
      - monitor-net
    labels:
        org.label-schema.group: "monitoring"
        
  nodeexporter:
    image: prom/node-exporter:v0.15.2
    container_name: nodeexporter
    privileged: true
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    ports:
      - "9100:9100"
    networks:
      - monitor-net
    labels:
        org.label-schema.group: "monitoring"
        
  postgresexporter:
    image: wrouesnel/postgres_exporter
    container_name: postgresexporter
    restart: unless-stopped
    ports:
      - "9187:9187"
    restart: unless-stopped
    networks:
      - monitor-net
    depends_on:
      - db
    command: "-extend.query-path=/queries.yaml"
    environment:
      - DATA_SOURCE_NAME= "postgresql://postgres:postgres@172.19.0.2:5432/postgres"
    volumes:
      - /path/to/queries.yaml:/queries.yaml
    
    

  grafana:
    image: grafana/grafana:4.6.3
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/datasources:/etc/grafana/datasources
      - ./grafana/dashboards:/etc/grafana/dashboards
      - ./grafana/setup.sh:/setup.sh
    entrypoint: /setup.sh
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - monitor-net
    labels:
        org.label-schema.group: "monitoring"
    
  portainer:
    image: portainer/portainer
    container_name: "portainer-app"
    command: --templates http://templates/templates.json 
    networks:
      - monitor-net
    restart: unless-stopped
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /opt/portainer/data:/data
  
  jupyter-notebook:
    image: jupyter/datascience-notebook
    networks:
      - monitor-net
    restart: unless-stopped
    ports:
      - "8888:8888"

  #caddy:
   # image: stefanprodan/caddy
    #container_name: caddy
    #ports:
     # - "3000:3000"
     # - "9090:9090"
     # - "9093:9093"
    #volumes:
     # - ./caddy/:/etc/caddy/
    #environment:
     # - ADMIN_USER=${ADMIN_USER:-admin}
     # - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
    #restart: unless-stopped
    #networks:
     # - monitor-net
    #labels:
     # org.label-schema.group: "monitoring" 
      
  postgres-pgadmin:
    image: wnameless/postgresql-phppgadmin
    ports:
      - "49060:22"
      - "49061:80"
      - "49062:5432"
  #pg_prometheus:
   # image: timescale/pg_prometheus
    #ports:
      #- "5432:5432"
  
  #prom-post-adapter:
   # image: timescale/prometheus-postgresql-adapter
    #ports:
     # - "9201:9201"
    #links:
     # - pg_prometheus
    
